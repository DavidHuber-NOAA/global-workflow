{% include machine_ID + ".yaml.j2" %}
{% include "common.yaml.j2" %}
{% set var = 0 %}

check_configuration:
    # Determine if the configuration given is valid.
    {% if MODE == "forecast-only" or MODE == "cycled" %}
    {% set valid = True %}
    valid_mode: True
    {% else %}
    {% set valid = False %}
    valid_mode: False
    reason_mode: "Invalid mode selected: {{ MODE }}"
    {% endif %}

    {% if DO_ATM == True %}
    {% if CASE == "C48" or CASE == "C96" or CASE == "C192" or CASE == "C384" or
          CASE == "C768" or CASE == "C1152" or CASE == "C3072" %}
    valid_atm: True
    {% else %}
    valid_atm: False
    reason_atm: "Invalid CASE specified: {{ CASE }}"
    {% set valid = False %}
    {% endif %}
    {% endif %}

    {% if DO_HYBVAR == True %}
    {% if CASE_ENS == "C48" or CASE_ENS == "C96" or CASE_ENS == "C192" or
          CASE_ENS == "C384" %}
    valid_atmens: True
    {% else %}
    valid_atmens: False
    reason_atmens: "Invalid CASE_ENS specified: {{ CASE_ENS }}"
    {% set valid = False %}
    {% endif %}
    {% endif %} # Ensemble resolution

    {% if DO_OCN == True %}
    {% if OCNRES == "050" or OCNRES == "100" or OCNRES == "500" %}
    valid_ocn: True
    {% else %}
    valid_ocn: False
    reason_ocn: "Invalid OCNRES specified: {{ OCNRES }}"
    {% set valid = False %}
    {% endif %}
    {% endif %}

    {% if DO_ICE == True %}
    {% if DO_OCN and ICERES == OCNRES and (ICERES == "050" or ICERES == "100" or ICERES == "500") %}
    valid_ice: True
    {% else %}
    valid_ice: False
    {% if not DO_OCN == True %}
    {% set reason_ice = "Cannot run ICE without OCN (DO_OCN must also be YES)" %}
    {% elif ICERES != OCNRES %}
    {% set reason_ice = "ICERES ({{ ICERES }}) cannot be different than OCNRES ({{ OCNRES }})" %}
    {% else %}
    {% set reason_ice = "Invalid ICERES ({{ ICERES }})"
    {% endif %}
    reason_ice: {{ reason_ice }}
    {% set valid = False %}
    {% endif %}
    {% endif %}

    {% if DO_AERO == True %}
    {% if DO_ATM == True %}
    {% if MODE == "forecast-only" %}
    valid_aero: True
    {% elif MODE == "cycled" and (CASE == "C48" or CASE == "C96" or CASE == "C192" or
          CASE == "C384" or CASE == "C768") %}
    valid_aero: True
    valid_aero_anl: True
    {% else %}
    {% set valid = False %}
    valid_aero: False
    reason_aero: "Invalid aerosol resolution (CASE): {{ CASE }}"
    {% endif %}
    {% endif %}
    {% endif %}

    {% if DO_WAVE == True %}
    {% if DO_ATM == True and ( waveGRD == "gnh_10m;aoc_9km;gsh_15m" or
                       waveGRD == "gwes_30m" or waveGRD == "glo_025" or
                       waveGRD == "glo_200" or waveGRD == "glo_500" or
                       waveGRD == "mx025" or waveGRD == "uglo_100km" or
                       waveGRD == "uglo_m1g16") %}
    valid_wave: True
    {% else %}
    {% set valid = False %}
    valid_wave: False
    {% if DO_ATM == False %}
    reason_wave: "Cannot run waves without ATM (DO_ATM must be YES)"
    {% else %}
    reason_wave: "Invalid WW3 resolution (waveGRD): {{ waveGRD }}"
    {% endif %}
    {% endif %}
    {% endif %}

    valid: {{ valid }}

prep:
    all_runs:
        walltime: "00:30:00"
        num_tasks: 4
        mem_per_task: "20GB"

prepsnowobs:
    all_runs:
        walltime: "00:05:00"
        num_tasks: 1
        mem_per_task: "0"

prepatmiodaobs:
    all_runs:
        walltime: "00:30:00"
        num_tasks: 1
        mem_per_task: "0"

aerosol_init:
    all_runs:
        walltime: "00:05:00"
        num_tasks: 1
        mem_per_task: "6GB"

waveinit:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 12
        mem_per_task: "200MB"

waveprep:
    all_runs:
        walltime: "00:10:00"
    gfs:
        num_tasks: 65
        mem_per_task: "2500MB"
    gdas:
        num_tasks: 5
        mem_per_task: "20GB"

wavepostsbs:
    all_runs:
        num_tasks: 8
        mem_per_task: "1300MB"
    gdas:
        walltime: "00:20:00"
    gfs:
        walltime: "03:00:00"

wavepostbndpnt:
    all_runs:
        walltime: "01:00:00"
        num_tasks: 240
        mem_per_task: {{ mem_per_cpu }}

wavepostbndpntbll:
    all_runs:
        walltime: "01:00:00"
        num_tasks: 448
        mem_per_task: {{ mem_per_cpu }}

wavepostpnt:
    all_runs:
        walltime: "04:00:00"
        num_tasks: 200
        mem_per_task: {{ mem_per_cpu }}

wavegempak:
    all_runs:
        walltime: "02:00:00"
        num_tasks: 1
        mem_per_task: "1GB"

waveawipsbulls:
    all_runs:
        walltime: "00:20:00"
        num_tasks: 1
        mem_per_task: {{ mem_per_cpu }}

waveawipsgridded:
    all_runs:
        walltime: "02:00:00"
        num_tasks: 1
        mem_per_task: "1GB"

atmanlinit:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 1
        mem_per_task: "3072M"

atmanlvar:
    all_runs:
        walltime: "00:30:00"
        num_tasks: {{ LAYOUT_X_ATMANL * LAYOUT_Y_ATMANL * 6 }}
        mem_per_task: {{ mem_per_cpu }}
        layout:
            x: {{ LAYOUT_X_ATMANL }}
            y: {{ LAYOUT_Y_ATMANL }}
            io_x: {{ IO_LAYOUT_X }}
            io_y: {{ IO_LAYOUT_Y }}

atmanlfv3inc:
    all_runs:
        walltime: "00:30:00"
        num_tasks: {{ LAYOUT_X_ATMANL * LAYOUT_Y_ATMANL * 6 }}
        mem_per_task: {{ mem_per_cpu }}
        layout:
            x: {{ LAYOUT_X_ATMANL }}
            y: {{ LAYOUT_Y_ATMANL }}
            io_x: {{ IO_LAYOUT_X }}
            io_y: {{ IO_LAYOUT_Y }}

atmanlfinal:
    all_runs:
        num_tasks: {{ cpus_per_node }}
        walltime: "00:30:00"
        mem_per_task: {{ mem_per_cpu }}

snowanl:
    {% if CASE == "C768" %}
    {% set layout_x_snowanl, layout_y_snowanl == (6, 6) %}
    {% elif CASE == "C384" %}
    {% set layout_x_snowanl, layout_y_snowanl == (5, 5) %}
    {% elif CASE == "C192" or CASE == "C96" or CASE == "C48" %}
    {% set layout_x_snowanl, layout_y_snowanl == (1, 1) %}
    {% endif %}
    all_runs:
        num_tasks: {{ layout_x_snowanl * layout_y_snowanl * 6 }}
        walltime: "00:15:00"
        mem_per_task: {{ mem_per_cpu }}
        layout:
            x: {{ layout_x_snowanl }}
            y: {{ layout_y_snowanl }}
            io_x: {{ IO_LAYOUT_X }}
            io_y: {{ IO_LAYOUT_Y }}

aeroanlinit:
    {% if CASE == "C768" %}
    {% set layout_x_aeroanlinit, layout_y_aeroanlinit == (8, 8) %}
    {% elif CASE == "C384" %}
    {% set layout_x_aeroanlinit, layout_y_aeroanlinit == (8, 8) %}
    {% elif CASE == "C192" or CASE == "C96" %}
    {% set layout_x_aeroanlinit, layout_y_aeroanlinit == (8, 8) %}
    {% elif CASE == "C48" %}
    {% set layout_x_aeroanlinit, layout_y_aeroanlinit == (1, 1) %}
    {% endif %}
    all_runs:
        num_tasks: 1
        walltime: "00:10:00"
        mem_per_task: "3072M"
        layout:
            x: {{ layout_x_aeroanlinit }}
            y: {{ layout_y_aeroanlinit }}

aeroanlrun:
    {% if CASE == "C768" %}
    {% set layout_x_aeroanlrun, layout_y_aeroanlrun == (8, 8) %}
    {% elif CASE == "C384" %}
    {% set layout_x_aeroanlrun, layout_y_aeroanlrun == (8, 8) %}
    {% elif CASE == "C192" or CASE == "C96" %}
    {% set layout_x_aeroanlrun, layout_y_aeroanlrun == (8, 8) %}
    {% elif CASE == "C48" %}
    {% set layout_x_aeroanlrun, layout_y_aeroanlrun == (1, 1) %}
    {% endif %}
    all_runs:
        num_tasks: {{ layout_x_aeroanlrun * layout_y_aeroanlrun * 6 }}
        walltime: "00:30:00"
        mem_per_task: {{ mem_per_cpu }}
        layout:
            x: {{ layout_x_aeroanlrun }}
            y: {{ layout_y_aeroanlrun }}

aeroanlfinal:
    all_runs:
        num_tasks: 1
        walltime: "00:10:00"
        mem_per_task: "3072M"

ocnanalprep:
    all_runs:
        num_tasks: 1
        walltime: "00:10:00"
        mem_per_task: "24GB"

prepoceanobs:
    all_runs:
        num_tasks: 1
        walltime: "00:10:00"
        mem_per_task: "48GB"

ocnanalbmat:
    {% if OCNRES == "025" %}
    {% set tasks_ocnanalbmat = 480 %}
    {% elif OCNRES == "050" %}
    {% set tasks_ocnanalbmat = 16 %}
    {% elif OCNRES == "500" %}
    {% set tasks_ocnanalbmat = 16 %}
    {% endif %}
    all_runs:
        num_tasks: {{ tasks_ocnanalbmat }}
        walltime: "00:15:00"
        mem_per_task: {{ mem_per_cpu }}

ocnanalecen:
    {% if OCNRES == "025" %}
    {% set num_tasks = 40 %}
    {% set mem_per_task = "2400MB" %}
    {% endif %}
    {% elif OCNRES == "050" %}
    {% set num_tasks = 16 %}
    {% set mem_per_task = "2400MB" %}
    {% endif %}
    {% elif OCNRES == "500" %}
    {% set num_tasks = 16 %}
    {% set mem_per_task = "1500MB" %}
    {% endif %}

    all_runs:
        walltime: "00:10:00"
        num_tasks: {{ num_tasks }}
        mem_per_task: {{ mem_per_task }}

ocnanalchkpt:
    all_runs:
        walltime: "00:10:00"
        {% if OCNRES == "025" %}
        {% set mem_per_task = "3.2GB" %}
        {% set num_tasks = 40 %}
        {% elif OCNRES == "050" %}
        {% set mem_per_task = "2GB" %}
        {% set num_tasks = 16 %}
        {% elif OCNRES == "500" %}
        {% set mem_per_task = "4GB" %}
        {% set num_tasks = 8 %}
        {% endif %}
        num_tasks: {{ num_tasks }}
        mem_per_task: {{ mem_per_task }}

ocnanalpost:
    all_runs:
        walltime: "00:30:00"

ocnanalvrfy:
    all_runs:
        walltime: "00:35:00"
        num_tasks: 1
        mem_per_task: "24GB"

anal:
    {% set atm_res = CASE %}
    gdas:
        {% set gsi_run = 'gdas' %}
        {% filter indent(width=8) %}
        {% include "gsi_resources.yaml" %}
        {% endfilter %}

    gfs:
        {% set gsi_run = 'gdas' %}
        {% filter indent(width=8) %}
        {% include "gsi_resources.yaml" %}
        {% endfilter %}

    all_runs:
        exclusive: True

analcalc:
    # The analcalc job consists of a few sub jobs, each requiring a different
    # number of tasks.  echgres is run as part of analcalc and needs a different layout
    # the number of tasks is the length of IAUFHRS
    gdas:
        threads_echgres: 4
        mem_per_cpu_echgres: "4.8GB"
    gfs:
        threads_echgres: 12
        mem_per_cpu_echgres: "16GB"
    all_runs:
        walltime: "00:10:00"
        num_tasks: 127
        exclusive: True

analdiag:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 96             # Should be at least twice npe_ediag
        mem_per_task: "1.2GB"

sfcanl:
    all_runs:
        walltime: "00:20:00"
        num_tasks: 6
        mem_per_task: "15G"

fcst:
    # Deterministic settings
    {% set atm_res = CASE %}
    {% if DO_OCN == True %}{% set ocn_res = OCNRES %}{% endif %}
    {% if DO_ICE == True %}{% set ice_res = ICERES %}{% endif %}
    {% if DO_WAVE == True %}{% set wave_grid = waveGRD %}{% endif %}
    {% if DO_AERO == True %}{% set aero_res = CASE %}{% endif %} # Not used, but define anyway
    enkfgfs:
        {% set ufs_run = "gfs" %}
        {% filter indent(width=8) %}
        {% include "ufs_resources.yaml.j2" %}
        {% endfilter %}
    enkfgdas:
        {% set ufs_run = "gdas" %}
        {% filter indent(width=8) %}
        {% include "ufs_resources.yaml.j2" %}
        {% endfilter %}

    # Ensemble settings
    {% set atm_res = CASE_ENS %}
    {% if DO_OCN == True %}{% set ocn_res = OCNRES %}{% endif %}
    {% if DO_ICE == True %}{% set ice_res = ICERES %}{% endif %}
    {% if DO_WAVE == True %}{% set wave_grid = waveGRD %}{% endif %}
    {% if DO_AERO == True %}{% set aero_res = CASE %}{% endif %} # Not used, but define anyway
    enkfgfs:
        {% set ufs_run = "gfs" %}
        {% filter indent(width=8) %}
        {% include "ufs_resources.yaml.j2" %}
        {% endfilter %}
    enkfgdas:
        {% set ufs_run = "gdas" %}
        {% filter indent(width=8) %}
        {% include "ufs_resources.yaml.j2" %}
        {% endfilter %}

    all_runs:
        - is_exclusive: True

atmos_products:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 24
        mem_per_task: "3.8GB"

verfozn:
    all_runs:
        walltime: "00:05:00"
        num_tasks: 1
        mem_per_task: "1GB"

verfrad:
    all_runs:
        walltime: "00:40:00"
        num_tasks: 1
        mem_per_task: "5GB"

vminmon:
    all_runs:
        walltime: "00:05:00"
        num_tasks: 1
        mem_per_task: "1GB"

tracker:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 1
        mem_per_task: "4GB"

genesis:
    all_runs:
        walltime: "00:25:00"
        num_tasks: 1
        mem_per_task: "10GB"

genesis_fsu:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 1
        mem_per_task: "1GB"

fit2obs:
    all_runs:
        walltime: "00:20:00"
        num_tasks: 3
        mem_per_task: "20GB"
        # if [[ ${machine} == "WCOSS2" ]]; then npe_node_fit2obs=3 ; fi

metp:
    gdas:
        walltime: "03:00:00"
    gfs:
        walltime: "06:00:00"
    all_runs:
        num_tasks: 4
        tasks_per_node: 4
        mem_per_task: "max"

echgres:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 3
        mem_per_task: "max"

init:
    all_runs:
        walltime: "00:30:00"
        num_tasks: 24
        mem_per_task: "12GB"
        tasks_per_node: 6

init_chem:
    all_runs:
        walltime: "00:30:00"
        num_tasks: 1
        mem_per_task: "max"

mom6ic:
    all_runs:
        walltime: "00:30:00"
        num_tasks: 24
        mem_per_task: "max"

arch:
    all_runs:
        walltime: "06:00:00"
        tasks: 1
        mem_per_task: "4GB"

earc:
    all_runs:
        walltime: "06:00:00"
        tasks: 1
        mem_per_task: "4GB"

getic:
    all_runs:
        walltime: "06:00:00"
        tasks: 1
        mem_per_task: "4GB"

cleanup:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 1
        mem_per_task: "4GB"

stage_ic:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 1
        mem_per_task: {{ mem_per_node }}

atmensanlinit:
    all_runs:
        layout:
            x: {{ LAYOUT_X_ATMENSANL }}
            y: {{ LAYOUT_Y_ATMENSANL }}

        walltime: "00:10:00"
        num_tasks: 1
        mem_per_task: "3GB"

atmensanlrun:
    all_runs:
        layout:
            x: {{ LAYOUT_X_ATMENSANL }}
            y: {{ LAYOUT_Y_ATMENSANL }}

        walltime: "00:30:00"
        num_tasks: {{ LAYOUT_X_ATMENSANL * LAYOUT_Y_ATMENSANL * 6 }}
        mem_per_task: "max"

atmensanlfinal:
    all_runs:
        walltime: "00:30:00"
        mem_per_task: {{ mem_per_node }}

eobs:
    all_res:
        walltime: "00:15:00"

eomg:
    all_runs:
        {% if CASE_ENS == "C384" %}
        tasks: 200
        {% elif CASE_ENS == "C192" %}
        tasks: 100
        {% else %}
        tasks: 40
        {% endif %}

        walltime: "00:30:00"
        threads: 2
        mem_per_task: "max"

eobs:
    all_runs:
        {% if CASE_ENS == "C384" %}
        tasks: 200
        {% elif CASE_ENS == "C192" %}
        tasks: 100
        {% else %}
        tasks: 40
        {% endif %}

        walltime: "00:15:00"
        threads: 2
        mem_per_task: "max"

ediag:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 48
        mem_per_task: "1.3GB"

eupd:
    all_runs:
        walltime: "00:30:00"
        {% if CASE_ENS == "C384" %}
        tasks: 480
        mem_per_task: "16GB"
        {% elif CASE_ENS == "C192" %}
        tasks: 270
        mem_per_task: "19GB"
        {% else %}
        tasks: 42
        mem_per_task: "9GB"
        {% endif %}

ecen:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 80
        {% if CASE_ENS == "C384" %}
        mem_per_task: "16GB"
        {% else %}
        mem_per_task: "4.6GB"
        {% endif %}

esfc:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 80
        mem_per_task: {{ mem_per_node }}

epos:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 80
        mem_per_task: {{ mem_per_cpu }}

postsnd:
    all_runs:
        walltime: "02:00:00"
        tasks: 40
        threads: 8
        mem_per_task: "24GB"

#    npe_node_postsnd=10
#    npe_postsndcfp=9
#    npe_node_postsndcfp=1
#    postsnd_req_cores=$(( npe_node_postsnd * nth_postsnd ))
#    if (( postsnd_req_cores > npe_node_max )); then
#        npe_node_postsnd=$(( npe_node_max / nth_postsnd ))
#    fi
#    is_exclusive=True

awips:
    all_runs:
        walltime: "03:30:00"
        num_tasks: 1
        mem_per_task: "3GB"

npoess:
    all_runs:
        walltime: "03:30:00"
        num_tasks: 1
        mem_per_task: "3GB"

gempak:
    all_runs:
        walltime: "03:00:00"
    gdas:
        tasks: 2
        mem_per_task: "2GB"
    gfs:
        tasks: 28
        mem_per_task: "100MB"

mos_stn_prep:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 3
        mem_per_task: "2GB"
        PTILE: 3

mos_grd_prep:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 4
        mem_per_task: "4GB"
        PTILE: 4

mos_ext_stn_prep:
    all_runs:
        walltime: "00:15:00"
        num_tasks: 2
        mem_per_task: "3GB"
        PTILE: 2

mos_ext_grd_prep:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 7
        mem_per_task: "500MB"
        PTILE: 7

mos_stn_fcst:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 5
        mem_per_task: "8GB"
        PTILE: 5

mos_grd_fcst:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 7
        mem_per_task: "7GB"
        PTILE: 7

mos_ext_stn_fcst:
    all_runs:
        walltime: "00:20:00"
        num_tasks: 3
        mem_per_task: "16.5GB"
        PTILE: 3
        prepost: True

mos_ext_grd_fcst:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 7
        mem_per_task: "7GB"
        PTILE: 7

mos_stn_prdgen:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 1
        mem_per_task: "15GB"
        PTILE: 1
        prepost: True

mos_grd_prdgen:
    all_runs:
        walltime: "00:40:00"
        num_tasks: 72
        threads: 4
        mem_per_task: "2GB"
        PTILE: 72

mos_ext_stn_prdgen:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 1
        mem_per_task: "15GB"
        PTILE: 1
        prepost: True

mos_ext_grd_prdgen:
    all_runs:
        walltime: "00:30:00"
        num_tasks: 96
        threads: 16
        mem_per_node: "15GB"
        PTILE: 96

mos_wx_prdgen:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 4
        threads: 2
        mem_per_task: "2.5GB"
        PTILE: 4

mos_wx_ext_prdgen:
    all_runs:
        walltime: "00:10:00"
        num_tasks: 4
        threads: 2
        mem_per_task: "2.5GB"
        PTILE: 4
